from typing import Optional
from target_management import Scan
from scanning_modules import VulnerabilityScanner
import requests
from urllib.parse import urljoin


class Vulnerability:
    def __init__(self, vuln_id: int = None, name: str = "", description: str = "", severity: str = "", affected_component: str = "", evidence: str = "", remediation: Optional[str] = None, scan: Optional = None):
        self.vuln_id = vuln_id
        self.name = name
        self.description = description
        self.severity = severity
        self.affected_component = affected_component
        self.evidence = evidence
        self.remediation = remediation
        self.scan = scan

    def to_dict(self) -> dict:
        return {
            "vuln_id": self.vuln_id,
            "name": self.name,
            "description": self.description,
            "severity": self.severity,
            "affected_component": self.affected_component,
            "evidence": self.evidence,
            "remediation": self.remediation,
            "scan": self.scan
        }

    def from_dict(self, data: dict):
        self.vuln_id = data["vuln_id"]
        self.name = data["name"]
        self.description = data["description"]
        self.severity = data["severity"]
        self.affected_component = data["affected_component"]
        self.evidence = data["evidence"]
        self.remediation = data["remediation"]
        self.scan = data["scan"]


class XSSScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("XSS Scanner")
        self.description = "Scans the target for XSS vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=1,
            name="Cross-Site Scripting",
            description="Cross-Site Scripting allows an attacker to execute arbitrary scripts on the target.",
            severity="Medium",
            affected_component="Web Application",
            evidence="Found '<script>alert(1)</script>' in response body."
        ))


class SQLInjectionScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("SQL Injection Scanner")
        self.description = "Scans the target for SQL Injection vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=2,
            name="SQL Injection",
            description="SQL Injection allows an attacker to execute arbitrary SQL queries on the database.",
            severity="High",
            affected_component="Database",
            evidence="Found 'OR 1=1' in query parameter."
        ))


class CommandInjectionScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("Command Injection Scanner")
        self.description = "Scans the target for Command Injection vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=3,
            name="Command Injection",
            description="Command Injection allows an attacker to execute arbitrary commands on the server.",
            severity="Critical",
            affected_component="Operating System",
            evidence="Found '; ls' in command parameter."
        ))


class SSRFScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("SSRF Scanner")
        self.description = "Scans the target for Server-Side Request Forgery vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=4,
            name="Server-Side Request Forgery",
            description="Server-Side Request Forgery allows an attacker to make requests on behalf of the server.",
            severity="High",
            affected_component="Server",
            evidence="Found 'http://localhost' in URL parameter."
        ))


class LFIInjectionScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("LFI Injection Scanner")
        self.description = "Scans the target for Local File Inclusion vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=5,
            name="Local File Inclusion",
            description="Local File Inclusion allows an attacker to include arbitrary files on the server.",
            severity="Medium",
            affected_component="Server",
            evidence="Found '../../../../etc/passwd' in file parameter."
        ))


class RCEInjectionScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("RCE Injection Scanner")
        self.description = "Scans the target for Remote Code Execution vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=6,
            name="Remote Code Execution",
            description="Remote Code Execution allows an attacker to execute arbitrary code on the server.",
            severity="Critical",
            affected_component="Server",
            evidence="Found 'system('ls')' in code parameter."
        ))


class XXEScanner(VulnerabilityScanner):
    def __init__(self):
        super().__init__("XXE Scanner")
        self.description = "Scans the target for XML External Entity vulnerabilities."
        self.enabled = True

    def run(self, target, scan):
        scan.vulnerabilities.append(Vulnerability(
            vuln_id=7,
            name="XML External Entity",
            description="XML External Entity allows an attacker to read files on the server.",
            severity="High",
            affected_component="Server",
            evidence="Found '<!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]>' in XML parameter."
        ))


# functions
def send_http_request(url: str, method: str, data: dict)-> requests.Response:
    if method == "post":
        return requests.post(url, data=data, timeout=5)
    else:
        return requests.get(url, params=data, timeout=5)

def analyze_response(response: requests.Response, payload: str)-> bool:
    return payload in response.text

def inject_payload(url: str, form, payload: str)-> bool:
    action = form.get("action")
    method = form.get("method", "get").lower()
    target_url = urljoin(url, action)
    inputs = form.find_all("input")
    data = {}
    for input_field in inputs:
        name = input_field.get("name")
        if name:
            data[name] = payload
    try:
        response = send_http_request(target_url, method, data)
        return analyze_response(response, payload)
    except requests.RequestException:
        pass
    return False


