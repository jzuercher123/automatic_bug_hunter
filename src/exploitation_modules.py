from abc import ABC, abstractmethod
from target_management import Target, Scan
from typing import Dict, Any

class Exploit(ABC):
    def __init__(self, name: str):
        self.name = name
        self.description = ""

    @abstractmethod
    def run(self, target: Target, scan: Scan):
        pass

    def execute(self, target: Target, scan: Scan)-> bool:
        try:
            print(f"Executing {self.name} on {target.url}")
            self.run(target, scan)
            print(f"{self.name} execution completed.")
            return True
        except Exception as e:
            print(f"Failed to execute {self.name} on {target.url}. Error: {str(e)}")
            return False

class XSSExploit(Exploit):
    def __init__(self):
        super().__init__("XSS Exploit")
        self.description = "Executes a XSS exploit on the target."

    def run(self, target: Target, scan: Scan):
        scan.vulnerabilities.append("XSS Exploit successful.")

class SQLInjectionExploit(Exploit):
    def __init__(self):
        super().__init__("SQL Injection Exploit")
        self.description = "Executes a SQL Injection exploit on the target."

    def run(self, target: Target, scan: Scan):
        scan.vulnerabilities.append("SQL Injection Exploit successful.")


class RCEExploit(Exploit):
    def __init__(self):
        super().__init__("RCE Exploit")
        self.description = "Executes a Remote Code Execution exploit on the target."

    def run(self, target: Target, scan: Scan):
        scan.vulnerabilities.append("RCE Exploit successful.")


class PrivilegeEscalationExploit(Exploit):
    def __init__(self):
        super().__init__("Privilege Escalation Exploit")
        self.description = "Executes a Privilege Escalation exploit on the target."

    def run(self, target: Target, scan: Scan):
        scan.vulnerabilities.append("Privilege Escalation Exploit successful.")


# functions
def generate_payload(exploit_type: str, parameters: Dict[str, Any])-> str:
    if exploit_type == "XSS":
        return f"<script>alert('{parameters.get('message')}')</script>"
    elif exploit_type == "SQL Injection":
        return f"' OR 1=1 --"
    elif exploit_type == "RCE":
        return f"system('{parameters.get('command')}')"
    elif exploit_type == "Privilege Escalation":
        return f"sudo su"
    else:
        return ""

def execute_exploit(exploit_type: str, target: Target, scan: Scan, parameters: Dict[str, Any])-> bool:
    if exploit_type == "XSS":
        exploit = XSSExploit()
    elif exploit_type == "SQL Injection":
        exploit = SQLInjectionExploit()
    elif exploit_type == "RCE":
        exploit = RCEExploit()
    elif exploit_type == "Privilege Escalation":
        exploit = PrivilegeEscalationExploit()
    else:
        return False
    return exploit.execute(target, scan)
